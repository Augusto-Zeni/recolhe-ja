/**
 * @fileoverview Arquivo principal da aplica√ß√£o RecolheJ√° Backend
 * @description Este arquivo configura e inicializa o servidor NestJS com todas as configura√ß√µes globais
 * necess√°rias para o funcionamento da API do sistema de classifica√ß√£o de res√≠duos.
 * 
 * @author Equipe RecolheJ√°
 * @version 1.0.0
 */

import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ValidationPipe } from '@nestjs/common';
import { HttpAdapterHost } from '@nestjs/core';
import { AllExceptionsFilter } from './common/filters/all-exceptions.filter';

/**
 * Fun√ß√£o principal que inicializa a aplica√ß√£o NestJS
 * Configura middlewares globais, filtros de exce√ß√£o, CORS e pipes de valida√ß√£o
 */
async function bootstrap() {
  // Cria a inst√¢ncia da aplica√ß√£o NestJS com o m√≥dulo raiz
  const app = await NestFactory.create(AppModule);

  // Configura√ß√£o do filtro global de exce√ß√µes
  // Captura e trata todas as exce√ß√µes n√£o tratadas da aplica√ß√£o
  const httpAdapterHost = app.get(HttpAdapterHost);
  app.useGlobalFilters(new AllExceptionsFilter(httpAdapterHost));

  // Configura√ß√£o do CORS (Cross-Origin Resource Sharing)
  // Permite que o frontend mobile acesse a API de diferentes origens
  app.enableCors({
    origin: true, // Permite todas as origens em desenvolvimento
    credentials: true, // Permite envio de cookies e headers de autentica√ß√£o
  });

  // Configura√ß√£o do pipe global de valida√ß√£o
  // Valida automaticamente os dados de entrada usando class-validator e DTOs
  app.useGlobalPipes(
    new ValidationPipe({
      transform: true, // Transforma automaticamente os tipos dos dados
      whitelist: true, // Remove propriedades n√£o definidas nos DTOs
      forbidNonWhitelisted: true, // Retorna erro se propriedades n√£o permitidas forem enviadas
    }),
  );

  // Define a porta do servidor (padr√£o 3000 ou a definida na vari√°vel de ambiente)
  const port = process.env.PORT || 3000;
  
  // Inicia o servidor na porta especificada
  await app.listen(port);
  
  console.log(`üöÄ RecolheJ√° API est√° rodando na porta ${port}`);
  console.log(`üìö Documenta√ß√£o da API dispon√≠vel em: http://localhost:${port}/docs`);
}

// Inicia a aplica√ß√£o e trata erros de inicializa√ß√£o
bootstrap().catch((error) => {
  console.error('‚ùå Erro ao inicializar a aplica√ß√£o:', error);
  process.exit(1);
});
